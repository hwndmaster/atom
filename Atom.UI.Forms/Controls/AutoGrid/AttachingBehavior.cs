using System.ComponentModel;
using System.Windows.Controls;
using System.Windows.Data;
using Genius.Atom.UI.Forms.Controls.AutoGrid.Builders;
using Genius.Atom.UI.Forms.Controls.AutoGrid.Behaviors;
using Genius.Atom.UI.Forms.Controls.AutoGrid.ColumnBehaviors;
using Genius.Atom.UI.Forms.Wpf;
using Microsoft.Xaml.Behaviors;

namespace Genius.Atom.UI.Forms.Controls.AutoGrid;

public sealed class AttachingBehavior : Behavior<DataGrid>
{
    private readonly Disposer _disposer = new();
    private readonly Queue<AutoGridColumnContext> _contextsToPostProcess = new();
    private Lazy<AutoGridBuildContext> _autoGridBuildContext = new(() => throw new InvalidOperationException("AutoGridBuilder hasn't been initialized yet."));
    private List<(DataGridColumn Column, AutoGridBuildColumnContext Context)> _autoGeneratedColumnsMapping = [];

    protected override void OnAttached()
    {
        AssociatedObject.AutoGenerateColumns = true;
        AssociatedObject.AutoGeneratingColumn += OnAutoGeneratingColumn;
        AssociatedObject.AutoGeneratedColumns += OnAutoGeneratedColumns;

        AssociatedObject.AddingNewItem += OnAddingNewItem;

        var dpd = DependencyPropertyDescriptor.FromProperty(DataGrid.ItemsSourceProperty, typeof(DataGrid));
        dpd?.AddValueChanged(AssociatedObject, OnItemsSourceChanged);

        var dpd2 = DependencyPropertyDescriptor.FromProperty(Properties.AutoGridBuilderProperty, typeof(DataGrid));
        dpd2?.AddValueChanged(AssociatedObject, OnAutoGridBuilderChanged);

        AttachBindingProxy();

        base.OnAttached();
    }

    /// <summary>
    ///   Creates a resource within DataGrid bound to DataContext to make it available
    ///   in DataGridColumn binding, as a workaround, because traversing up with RelativeSource
    ///   doesn't work for columns.
    /// </summary>
    private void AttachBindingProxy()
    {
        var bindingProxy = new BindingProxy();
        var binding = new Binding("DataContext")
        {
            Source = AssociatedObject,
            Mode = BindingMode.OneWay
        };
        BindingOperations.SetBinding(bindingProxy, BindingProxy.DataProperty, binding);
        AssociatedObject.Resources.Add("proxy", bindingProxy);
    }

    private void OnAddingNewItem(object? sender, AddingNewItemEventArgs e)
    {
        e.NewItem = _autoGridBuildContext.Value.RecordFactory.Create();
    }

    private void OnItemsSourceChanged(object? sender, EventArgs e)
    {
        if (AssociatedObject.ItemsSource == null)
        {
            return;
        }

        var rowStyle = CreateRowStyle();

        new SelectableBehavior().Attach(AssociatedObject, rowStyle);
        new EditableBehavior().Attach(AssociatedObject, rowStyle);

        AssociatedObject.RowStyle = rowStyle;
    }

    private void OnAutoGridBuilderChanged(object? sender, EventArgs e)
    {
        _autoGridBuildContext = AutoGridBuildContext.CreateLazy(AssociatedObject);

        if (_autoGridBuildContext.Value.EnableVirtualization)
        {
            AssociatedObject.SetValue(VirtualizingPanel.IsVirtualizingProperty, true);
            AssociatedObject.SetValue(VirtualizingPanel.IsVirtualizingWhenGroupingProperty, true);
            AssociatedObject.SetValue(DataGrid.EnableRowVirtualizationProperty, true);
            AssociatedObject.SetValue(ScrollViewer.CanContentScrollProperty, true);
        }

        if (_autoGridBuildContext.Value.MakeReadOnly)
        {
            AssociatedObject.SetValue(DataGrid.IsReadOnlyProperty, true);
        }

        _autoGeneratedColumnsMapping = [];

        _disposer.Add(new DynamicColumnsBehavior(AssociatedObject, _autoGridBuildContext.Value).Attach());
    }

    private void OnAutoGeneratingColumn(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        var buildColumnContext = _autoGridBuildContext.Value.Columns.FirstOrDefault(x => x.Property.Name.Equals(e.PropertyName));
        if (buildColumnContext is null)
        {
            e.Cancel = true;
            return;
        }

        var context = new AutoGridColumnContext(AssociatedObject, e, buildColumnContext);

        if (buildColumnContext.IsAlwaysHidden
            || AutoGridBuilderHelpers.IsIgnorableProperty(e.PropertyName)
            || buildColumnContext.IsGroupedColumn())
            //|| typeof(ICollection).IsAssignableFrom(context.Property.PropertyType))
        {
            e.Cancel = true;
        }
        else
        {
            foreach (var columnBehavior in ColumnBehaviorsAccessor.GetAll())
            {
                columnBehavior.Attach(context);
            }

            WpfHelpers.EnableSingleClickEditMode(e.Column);
            _autoGeneratedColumnsMapping.Add((e.Column, buildColumnContext));
        }

        if (context.GetPostProcessingActions().Any())
        {
            _contextsToPostProcess.Enqueue(context);
        }
    }

    private void OnAutoGeneratedColumns(object? sender, EventArgs e)
    {
        int displayIndex = 0;
        foreach (var columnMapping in _autoGeneratedColumnsMapping.OrderBy(x => x.Context.DisplayIndex))
        {
            columnMapping.Column.DisplayIndex = displayIndex++;
        }

        while (_contextsToPostProcess.Count > 0)
        {
            var context = _contextsToPostProcess.Dequeue();
            foreach (var postProcessing in context.GetPostProcessingActions())
            {
                postProcessing();
            }
        }
    }

    private Style CreateRowStyle()
    {
        var rowStyle = new Style {
            TargetType = typeof(DataGridRow),
            BasedOn = (Style) AssociatedObject.FindResource("MahApps.Styles.DataGridRow")
        };

        StylingHelpers.CopyStyle(AssociatedObject.RowStyle, rowStyle);

        return rowStyle;
    }
}
